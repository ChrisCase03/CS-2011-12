import java.io.Serializable;

public class Attack implements Serializable{
	private int attackId;
	private String monsterName;
	private String killSite;
	private String deathDate;
	private int lostSouls;

	

	

	public Attack(int attackIdIn, String monsterNameIn, String killSiteIn, String deathDateIn, int lostSoulsIn) {
		attackId = attackIdIn;
		monsterName = monsterNameIn;
		killSite = killSiteIn;
		deathDate = deathDateIn;
		lostSouls = lostSoulsIn;
	}

	public int getattackId() {
		return attackId;
	}

	public void setattackId(int attackId) {
		this.attackId = attackId;
	}

	public String getmonsterName() {
		return monsterName;
	}

	public void setmonsterName(String monsterName) {
		this.monsterName = monsterName;
	}

	public String getkillSite() {
		return killSite;

	}

	public void setkillSite(String killSite) {
		this.killSite = killSite;
	}

	public String getdeathDate() {
		return deathDate;
	}

	public void setdeathDate(String deathDate) {
		this.deathDate = deathDate;
	}

	public int getlostSouls() {
		return lostSouls;
	}

	public void setlostSouls(int lostSouls) {
		this.lostSouls = lostSouls;
	}

	public String toString() {
		return "Attack  " + attackId + " " + " Occured on: " + deathDate + " " + "Monster: " + monsterName + " "
				+ "Attacked " + killSite + " " + "resulting in " + lostSouls + " " + " deaths";
	}
}

///////////////////////////////
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

public class BinaryMonsterPersistor {
	public void saveFile(File f, List<Attack> vl) {
		ObjectOutputStream out = null;
		try {
			out = new ObjectOutputStream(new BufferedOutputStream(
					new FileOutputStream(f)));
			out.writeObject(vl);
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	public List<Attack> readFile(File f) {
		ObjectInputStream in = null;
		List<Attack> vl = null;
		try {
			in = new ObjectInputStream(new BufferedInputStream(
					new FileInputStream(f)));
			vl = (List<Attack>) in.readObject();
			in.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return vl;
	}

}
//////////////////////////////
import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class MonsterPersistor {
	private static List<Attack> attacks;

	public void MonsterPersistor() {
		attacks = new ArrayList<Attack>();
		String[] choices = { "Quit", "List Attacks", "Add Attack", "Delete an Attack", "Save Attack", "Load Attack" };
		int choice;
		do {
			choice = JOptionPane.showOptionDialog(null, "Main Menu", "Main Menu", 0, JOptionPane.QUESTION_MESSAGE, null,
					choices, "null");

			switch (choice) {
			case 0:
				break;
			case 1:
				if (!(attacks.isEmpty()))
					listAttacks();
				break;
			case 2:

				addAttack();
				break;
			case 3:
				deleteAttack();
				break;
			case 4:
				saveFile();
			case 5:
				loadFile();
			}

		} while (choice != 0);
	}

	private void listAttacks() {
		StringBuilder sb = new StringBuilder();
		for (Attack v : attacks)
			sb.append(v.toString() + "\n");
		if (sb.length() == 0)
			sb.append("no attacks");
		JOptionPane.showMessageDialog(null, sb);
	}

	private void addAttack() {

		int attackID = Integer.parseInt(JOptionPane.showInputDialog("Please enter the attack number"));
		String monstorName = JOptionPane.showInputDialog("Please enter the name of the demon who destroyed out city ");
		String killSite = JOptionPane.showInputDialog("Please enter the location of the attack ");

		String deathDate = (JOptionPane.showInputDialog("Enter Date of Tragedy in the format MM/DD/YYYY"));
		String[] datenumby = deathDate.split("/");
		int Month = Integer.parseInt(datenumby[0]);
		int Day = Integer.parseInt(datenumby[1]);
		int year = Integer.parseInt(datenumby[2]);

		int lostSouls = Integer.parseInt(JOptionPane.showInputDialog("Enter the number of fatalities"));

		attacks.add(new Attack(attackID, monstorName, killSite, deathDate, lostSouls));
	}

	private void deleteAttack() {
		JOptionPane.showInputDialog(attacks);
		int remove = Integer.parseInt(JOptionPane.showInputDialog("Enter the index ID of the Attack to be deleted"));
		for (int i = 0; i < attacks.size(); i++)
			if (remove == i)
				;
		attacks.remove(remove);
	}
	public void saveFile() {
		BinaryMonsterPersistor persister = new BinaryMonsterPersistor();
		JFileChooser fc = new JFileChooser();
		int retVal = fc.showOpenDialog(null);
		if (retVal == JFileChooser.APPROVE_OPTION) {
			File selectedFile = fc.getSelectedFile();
			persister.saveFile(selectedFile, attacks);
		}
	}

	public void loadFile() {
		BinaryMonsterPersistor persister = new BinaryMonsterPersistor();
		JFileChooser fc = new JFileChooser();
		int retVal = fc.showOpenDialog(null);
		if (retVal == JFileChooser.APPROVE_OPTION) {
			File selectedFile = fc.getSelectedFile();
			attacks= persister.readFile(selectedFile);
		}

	}





}
///////////////////////

public class PersistorDriver {
	
		public static void main(String[] args) {
			MonsterPersistor gigan = new MonsterPersistor();
			gigan.MonsterPersistor();
		}
	}

	


